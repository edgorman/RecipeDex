name: Infrastructure Plan

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      apply_plan:
        required: true
        type: boolean
        default: false
    secrets:
      GITHUB_COMMENT_TOKEN:
        required: true
      TF_CLOUD_ORGANIZATION:
        required: true
      TF_API_TOKEN:
        required: true
      TF_WORKSPACE:
        required: true
      TF_VAR_GCP_PROJECT_ID:
        required: true
      TF_VAR_GCP_PROJECT_REGION:
        required: true
      TF_VAR_GCP_PROJECT_ZONE:
        required: true

jobs:
  infrastructure-plan:
    name: Infrastructure Plan
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      pull-requests: write

    env:
      # All TF_VARs must be quoted with `"`
      # GOOGLE_CREDENTIALS must be set in terraform ui
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
      TF_DIRECTORY: "./infrastructure"
      TF_LOCAL_DIRECTORY: "./infrastructure"
      TF_VAR_gcp_project_id: ${{ secrets.TF_VAR_GCP_PROJECT_ID }}
      TF_VAR_gcp_project_region: ${{ secrets.TF_VAR_GCP_PROJECT_REGION }}
      TF_VAR_gcp_project_zone: ${{ secrets.TF_VAR_GCP_PROJECT_ZONE }}

    steps:
      - id: checkout
        uses: actions/checkout@v3

      - id: upload
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.TF_DIRECTORY }}
          speculative: ${{ !inputs.apply_plan }}

      - id: create
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: ${{ !inputs.apply_plan }}

      - id: plan
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        with:
          plan: ${{ fromJSON(steps.create.outputs.payload).data.relationships.plan.data.id }}

      - id: apply
        if: ${{ inputs.apply_plan && fromJSON(steps.create.outputs.payload).data.attributes.actions.IsConfirmable }}
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        with:
          run: ${{ steps.create.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

      - id: comment
        if: ${{ !inputs.apply_plan }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_COMMENT_TOKEN }}
          script: |
            // Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
                Plan: ${{ steps.plan.outputs.add }} to add, ${{ steps.plan.outputs.change }} to change, ${{ steps.plan.outputs.destroy }} to destroy.
                `;
            // Delete previous comment so PR timeline makes sense
            if (botComment) {
                github.rest.issues.deleteComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                });
            }
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
            });
