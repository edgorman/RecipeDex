name: Infra Push Event

on:
  push:
    branches:
      - main
      - develop

env:
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
  TF_DIRECTORY: "./infra"
  TF_LOCAL_DIRECTORY: "./infra"

  # All TF_VARs must be quoted with `"`
  TF_VAR_gcp_project_id: ${{ secrets.TF_VAR_GCP_PROJECT_ID }}
  TF_VAR_gcp_project_region: ${{ secrets.TF_VAR_GCP_PROJECT_REGION }}
  TF_VAR_gcp_project_zone: ${{ secrets.TF_VAR_GCP_PROJECT_ZONE }}
  TF_VAR_gcp_terraform_cloud_service_account_credentials: ${{ secrets.TF_VAR_GCP_TERRAFORM_CLOUD_SERVICE_ACCOUNT_CREDENTIALS }}

jobs:
  terraform-apply:
    name: Terraform Apply
    environment: ${{ github.event.pull_request.base.ref == 'main' && 'prod' || 'dev' }}

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - id: checkout
        uses: actions/checkout@v3
      
      - id: upload
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.TF_DIRECTORY }}
          speculative: false

      - id: create
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: false

      - id: plan
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        with:
          plan: ${{ fromJSON(steps.create.outputs.payload).data.relationships.plan.data.id }}
    
      - id: apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        if: fromJSON(steps.create.outputs.payload).data.attributes.actions.IsConfirmable
        with:
          run: ${{ steps.create.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

      - id: delete
        uses: actions/github-script@v6
        env:
          GITHUB_SHA_HEAD: ${{ github.event.pull_request.head.sha }}
        with:
          script: |
            const { GITHUB_SHA_HEAD } = process.env
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: GITHUB_SHA_HEAD
            });
            await Promise.all(
              deployments.data.map(async (deployment) => {
                await github.rest.repos.createDeploymentStatus({ 
                  owner: context.repo.owner, 
                  repo: context.repo.repo, 
                  deployment_id: deployment.id, 
                  state: 'inactive' 
                });
                return github.rest.repos.deleteDeployment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id
                });
              })
            );
